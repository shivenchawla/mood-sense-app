package moodSense;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vividsolutions.jts.geom.Point;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.operation.distance.DistanceOp;

import java.lang.Double;
import moodSense.NeutralUser;
import moodSense.NeutralUserRepository;
import moodSense.SadUser;
import moodSense.SadUserRepository;
import moodSense.HappyUser;
import moodSense.HappyUserRepository;

import java.util.List;
import java.util.Iterator;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private HappyUserRepository happyUserRepository;
	private SadUserRepository sadUserRepository;
	private NeutralUserRepository neutralUserRepository;

	@GetMapping(path="/addhappy") // Map ONLY GET Requests
	public @ResponseBody String addNewHappyUser (@RequestParam Integer uid, @RequestParam String name
			, @RequestParam Integer x, @RequestParam Integer y, @RequestParam String coordslabel) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		GeometryFactory factory = new GeometryFactory();

		HappyUser n = new HappyUser();
		n.setUid(uid);
		n.setName(name);
		n.setCoords((new GeometryFactory()).createPoint(new Coordinate(x, y)));
		n.setcoordslabel(coordslabel);
		happyUserRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/addsad") // Map ONLY GET Requests
	public @ResponseBody String addNewSadUser (@RequestParam Integer uid, @RequestParam String name
			, @RequestParam Integer x, @RequestParam Integer y, @RequestParam String coordslabel) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		GeometryFactory factory = new GeometryFactory();

		SadUser n = new SadUser();
		n.setUid(uid);
		n.setName(name);
		n.setCoords((new GeometryFactory()).createPoint(new Coordinate(x, y)));
		n.setcoordslabel(coordslabel);
		sadUserRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/addneutral") // Map ONLY GET Requests
	public @ResponseBody String addNewNeutralUser (@RequestParam Integer uid, @RequestParam String name
			, @RequestParam Integer x, @RequestParam Integer y, @RequestParam String coordslabel) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		GeometryFactory factory = new GeometryFactory();

		NeutralUser n = new NeutralUser();
		n.setUid(uid);
		n.setName(name);
		n.setCoords((new GeometryFactory()).createPoint(new Coordinate(x, y)));
		n.setcoordslabel(coordslabel);
		neutralUserRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/allhappy")
	public @ResponseBody Iterable<HappyUser> getAllHappyUsers() {
		// This returns a JSON or XML with the users
		return happyUserRepository.findAll();
	}

	@GetMapping(path="/allsad")
	public @ResponseBody Iterable<SadUser> getAllSadUsers() {
		// This returns a JSON or XML with the users
		return sadUserRepository.findAll();
	}

	@GetMapping(path="/allneutral")
	public @ResponseBody Iterable<NeutralUser> getAllNeutralUsers() {
		// This returns a JSON or XML with the users
		return neutralUserRepository.findAll();
	}

	@GetMapping(path="/frequencydistribution")
	public @ResponseBody String getFrequencyDistribution(@RequestParam String name) {
		// This returns a String with the user's mood frequency distribution
		return "frequency - happy mood: " + happyUserRepository.countById(name) + " sad mood: " + sadUserRepository.countById(name) + " neutral mood: " + neutralUserRepository.countById(name);
	}

	@GetMapping(path="/proximity")
	public @ResponseBody String getProximity(@RequestParam String name, @RequestParam Integer x, @RequestParam Integer y) {
		// This returns a String with the name (if any) of user's closest happy location
		List<HappyUser> hul = happyUserRepository.findById(name);
		HappyUser candidate = (HappyUser) hul.get(0);
		String label = candidate.getcoordslabel();
		Iterator iter = hul.iterator();
		DistanceOp dop = new DistanceOp(candidate.getCoords(), (new GeometryFactory()).createPoint(new Coordinate(x, y)));
		double distance = dop.distance();
		while(iter.hasNext())
		{
			candidate = (HappyUser)iter.next();
			dop = new DistanceOp(candidate.getCoords(), (new GeometryFactory()).createPoint(new Coordinate(x, y)));
			if(distance > dop.distance())
			{
				label = candidate.getcoordslabel();
				distance = dop.distance();
			}
		}
		return label;
	}

}
